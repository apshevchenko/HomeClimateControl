(()=>{"use strict";var n,e={77:(n,e,t)=>{var r=t(540),a=t(961),o=t(72),i=t.n(o),l=t(825),s=t.n(l),c=t(659),u=t.n(c),A=t(56),f=t.n(A),d=t(159),m=t.n(d),p=t(113),y=t.n(p),h=t(523),b={};b.styleTagTransform=y(),b.setAttributes=f(),b.insert=u().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=m(),i()(h.A,b),h.A&&h.A.locals&&h.A.locals;var v=t(495),g={};function C(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}g.styleTagTransform=y(),g.setAttributes=f(),g.insert=u().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=m(),i()(v.A,g),v.A&&v.A.locals&&v.A.locals;const B=function(){var n,e,t,a,o,i,l=(n=(0,r.useState)(null),e=2,function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,o,i,l=[],s=!0,c=!1;try{if(o=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;s=!1}else for(;!(s=(r=o.call(t)).done)&&(l.push(r.value),l.length!==e);s=!0);}catch(n){c=!0,a=n}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return l}}(n,e)||function(n,e){if(n){if("string"==typeof n)return C(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?C(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],c=l[1];return(0,r.useEffect)((function(){var n=new WebSocket("ws://localhost:3000");return n.onmessage=function(n){var e=JSON.parse(n.data);void 0!==e.temperature&&c(e.temperature)},function(){n.close()}}),[]),r.createElement("div",{className:"temperature-display",style:{backgroundColor:null!==s?(t=s,a=Math.min(Math.max((t+10)/40,0),1),o=Math.floor(255*a),i=Math.floor(255*(1-a)),"rgb(".concat(o,", 0, ").concat(i,")")):"gray"}},r.createElement("h1",null,null!==s?"".concat(s.toFixed(1),"Â°C"):"Loading..."))};a.render(r.createElement(B,null),document.getElementById("root"))},495:(n,e,t)=>{t.d(e,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".temperature-display {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 200px;\n    width: 100%;\n    color: white;\n    font-size: 5rem;\n    font-weight: bold;\n    border-radius: 10px;\n    transition: background-color 0.5s ease;\n}\n","",{version:3,sources:["webpack://./src/TemperatureDisplay.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,WAAW;IACX,YAAY;IACZ,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".temperature-display {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 200px;\n    width: 100%;\n    color: white;\n    font-size: 5rem;\n    font-weight: bold;\n    border-radius: 10px;\n    transition: background-color 0.5s ease;\n}\n"],sourceRoot:""}]);const l=i},523:(n,e,t)=>{t.d(e,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,"body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    margin: 0;\n    padding: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,yBAAyB;IACzB,SAAS;IACT,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;AACjB",sourcesContent:["body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f0f0;\n    margin: 0;\n    padding: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n}"],sourceRoot:""}]);const l=i}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={id:n,exports:{}};return e[n](o,o.exports,r),o.exports}r.m=e,n=[],r.O=(e,t,a,o)=>{if(!t){var i=1/0;for(u=0;u<n.length;u++){for(var[t,a,o]=n[u],l=!0,s=0;s<t.length;s++)(!1&o||i>=o)&&Object.keys(r.O).every((n=>r.O[n](t[s])))?t.splice(s--,1):(l=!1,o<i&&(i=o));if(l){n.splice(u--,1);var c=a();void 0!==c&&(e=c)}}return e}o=o||0;for(var u=n.length;u>0&&n[u-1][2]>o;u--)n[u]=n[u-1];n[u]=[t,a,o]},r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n={792:0};r.O.j=e=>0===n[e];var e=(e,t)=>{var a,o,[i,l,s]=t,c=0;if(i.some((e=>0!==n[e]))){for(a in l)r.o(l,a)&&(r.m[a]=l[a]);if(s)var u=s(r)}for(e&&e(t);c<i.length;c++)o=i[c],r.o(n,o)&&n[o]&&n[o][0](),n[o]=0;return r.O(u)},t=self.webpackChunkclient=self.webpackChunkclient||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})(),r.nc=void 0;var a=r.O(void 0,[808],(()=>r(77)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,